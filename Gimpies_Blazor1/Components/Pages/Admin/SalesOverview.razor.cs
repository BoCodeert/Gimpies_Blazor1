// <auto-generated />
using Microsoft.EntityFrameworkCore;
using MudBlazor;
namespace Gimpies_Blazor1.Components.Pages.Admin
{
    public partial class SalesOverview
    {

        private string mostSoldShoe;
        private string leastSoldShoe;
        private decimal totalSales;
        private int Index = -1;

        public List<ChartSeries> Series = new List<ChartSeries>();

        public string[] XAxisLabels = {};

        protected override async Task OnInitializedAsync()
        {
            await LoadTopSellingShoes();

            var salesData = await DbContext.SalesTransactions
                .Include(st => st.Shoe)
                .ThenInclude(s => s.Brand)
                .Include(st => st.Shoe)
                .ThenInclude(s => s.Model)
                .GroupBy(st => st.ShoeId)
                .Select(group => new
                {
                    ShoeId = group.Key,
                    TotalSold = group.Sum(st => st.Quantity),
                    TotalRevenue = group.Sum(st => st.Quantity * st.Price),
                    Shoe = group.FirstOrDefault().Shoe
                })
                .ToListAsync();


            var mostSold = salesData.OrderByDescending(sd => sd.TotalSold).FirstOrDefault();
            mostSoldShoe = mostSold != null
                ? $"{mostSold.Shoe.Brand.BrandName} {mostSold.Shoe.Model.ModelName} ({mostSold.TotalSold} paar)"
                : "Geen schoenen verkocht.";

            var leastSold = salesData.OrderBy(sd => sd.TotalSold).FirstOrDefault();
            leastSoldShoe = leastSold != null
                ? $"{leastSold.Shoe.Brand.BrandName} {leastSold.Shoe.Model.ModelName} ({leastSold.TotalSold} paar)"
                : "Geen schoenen verkocht.";

            totalSales = salesData.Sum(sd => sd.TotalRevenue);


        }

        private async Task LoadTopSellingShoes()
        {
            // Haal de top 5 verkochte schoenen op
            var topSellingShoes = await DbContext.SalesTransactions
                .Include(st => st.Shoe)
                .ThenInclude(s => s.Model)
                .Include(st => st.Shoe)
                .ThenInclude(s => s.Brand)
                .GroupBy(st => st.ShoeId)
                .Select(group => new
                {
                    ShoeName = $"{group.FirstOrDefault().Shoe.Brand.BrandName} {group.FirstOrDefault().Shoe.Model.ModelName}",
                    TotalSold = group.Sum(st => st.Quantity)
                })
                .OrderByDescending(s => s.TotalSold)
                .Take(5)
                .ToListAsync();

            // Update XAxisLabels met de top 5 schoennamen
            XAxisLabels = topSellingShoes.Select(s => s.ShoeName).ToArray();

            // Update Series met de verkoopdata
            Series = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Aantal paar schoenen verkocht",
                    Data = topSellingShoes.Select(s => (double)s.TotalSold).ToArray()
                }
            };

            StateHasChanged();
        }


    }
}